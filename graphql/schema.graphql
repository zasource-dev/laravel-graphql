type Query {
    user(id: ID! @eq): User @find
    users: [User!]! @paginate
    article(id: ID @eq): Article @find
    articles: [Article!]! @paginate
    me: User @auth(guard: "api")
}

input AddCommentInput {
    articleId: Int!
    text: String!
}

type Mutation {
    createArticle(title: String!, content: String!): Article
        @field(resolver: "ArticleMutator@create")
        @middleware(checks: ["auth:api"])

    addComment(comment: AddCommentInput!): Comment
        @field(resolver: "ArticleMutator@resolveAddComment")
        @middleware(checks: ["auth:api"])

    createUser(
        name: String!
        email: String! @rules(apply: ["email", "unique:users"])
        password: String! @bcrypt @rules(apply: ["min:6"])
    ): User @create

    login(email: String!, password: String!): String
        @field(resolver: "AuthMutator@resolve")
}

#import user.graphql
